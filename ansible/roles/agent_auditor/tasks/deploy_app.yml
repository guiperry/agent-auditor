---
- name: Create application group
  group:
    name: "{{ app_group }}"
    state: present

- name: Create application user
  user:
    name: "{{ app_user }}"
    group: "{{ app_group }}"
    shell: /bin/bash
    home: "{{ app_dir }}"
    create_home: yes
    state: present

- name: Copy local binary to server
  copy:
    src: "../../../{{ binary_name }}" # Path relative to the playbook file
    dest: "{{ app_dir }}/{{ binary_name }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755' # Make it executable
    
- name: Ensure binary is executable by root
  file:
    path: "{{ app_dir }}/{{ binary_name }}"
    mode: '0755'
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    attributes: "+x"

- name: Copy requirements.txt to server
  copy:
    src: "../../../requirements.txt"
    dest: "{{ app_dir }}/requirements.txt"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0644'

- name: Install Python dependencies
  pip:
    requirements: "{{ app_dir }}/requirements.txt"
    virtualenv: "{{ app_dir }}/venv"
    virtualenv_command: python3 -m venv
  become: true
  become_user: "{{ app_user }}"

- name: Create required directories
  file:
    path: "{{ app_dir }}/{{ item }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'
  loop:
    - uploads
    - reports
    - voice_reports
    - scripts  # Keep the scripts directory for the embedded script
    - logs     # Add logs directory for audit logs

- name: Create empty audit log file with correct permissions
  file:
    path: "{{ app_dir }}/aegong_audit.log"
    state: touch
    owner: root
    group: root
    mode: '0644'
    
- name: Ensure application directory and contents are readable by root
  file:
    path: "{{ app_dir }}"
    state: directory
    mode: '0755'
    recurse: yes

- name: Ensure scripts directory exists and has correct permissions
  file:
    path: "{{ app_dir }}/scripts"
    state: directory
    owner: root
    group: root
    mode: '0755'

- name: Copy set_target_host.sh script to scripts directory
  copy:
    src: "../../../scripts/set_target_host.sh"
    dest: "{{ app_dir }}/scripts/set_target_host.sh"
    owner: root
    group: root
    mode: '0755'

- name: Create .env file with correct permissions (will be populated by set_target_host.sh)
  file:
    path: "{{ app_dir }}/.env"
    state: touch
    owner: root
    group: root
    mode: '0644'

- name: Run set_target_host.sh script to populate .env file
  command: "{{ app_dir }}/scripts/set_target_host.sh {{ app_dir }}/.env"
  register: set_target_host_result
  changed_when: false

- name: Display set_target_host.sh result
  debug:
    msg: "{{ set_target_host_result.stdout_lines }}"

- name: Copy encrypted key file to server
  copy:
    src: "{{ voice_key_file_src }}"
    dest: "{{ voice_key_file_dest }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0600' # Restrictive permissions
  when: voice_enabled

- name: Configure voice_config.json from template
  template:
    src: voice_config.json.j2
    dest: "{{ app_dir }}/voice_config.json"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0644'
  when: voice_enabled

- name: Copy systemd service file
  template:
    src: aegong.service.j2
    dest: "/etc/systemd/system/{{ binary_name }}.service"
    owner: root
    group: root
    mode: '0644'
  notify: Restart {{ binary_name }} service

- name: Enable and start the {{ binary_name }} service
  systemd:
    name: "{{ binary_name }}"
    state: started
    enabled: true
    daemon_reload: true

- name: Add handler to restart service
  meta: flush_handlers
