---
- name: Create application group
  group:
    name: "{{ app_group }}"
    state: present

- name: Create application user
  user:
    name: "{{ app_user }}"
    group: "{{ app_group }}"
    shell: /bin/bash
    home: "{{ app_dir }}"
    create_home: yes
    state: present

- name: Copy local binary to server
  copy:
    src: "../../../{{ binary_name }}" # Path relative to the playbook file
    dest: "{{ app_dir }}/{{ binary_name }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755' # Make it executable

- name: Copy requirements.txt to server
  copy:
    src: "../../../requirements.txt"
    dest: "{{ app_dir }}/requirements.txt"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0644'

- name: Install Python dependencies
  pip:
    requirements: "{{ app_dir }}/requirements.txt"
    virtualenv: "{{ app_dir }}/venv"
    virtualenv_command: python3 -m venv
  become: true
  become_user: "{{ app_user }}"

- name: Create required directories
  file:
    path: "{{ app_dir }}/{{ item }}"
    state: directory
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0755'
  loop:
    - uploads
    - reports
    - voice_reports

- name: Copy encrypted key file to server
  copy:
    src: "{{ voice_key_file_src }}"
    dest: "{{ voice_key_file_dest }}"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0600' # Restrictive permissions
  when: voice_enabled

- name: Configure voice_config.json from template
  template:
    src: voice_config.json.j2
    dest: "{{ app_dir }}/voice_config.json"
    owner: "{{ app_user }}"
    group: "{{ app_group }}"
    mode: '0644'
  when: voice_enabled

- name: Copy systemd service file
  copy:
    src: agent-auditor.service
    dest: /etc/systemd/system/agent-auditor.service
    owner: root
    group: root
    mode: '0644'
  notify: Restart agent-auditor service

- name: Enable and start the agent-auditor service
  systemd:
    name: agent-auditor
    state: started
    enabled: true
    daemon_reload: true

- name: Add handler to restart service
  meta: flush_handlers
