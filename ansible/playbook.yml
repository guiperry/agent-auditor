---
# EC2 Instance Management and Deployment Playbook
# This playbook implements a cost-saving strategy by:
# 1. Finding and starting the EC2 instance
# 2. Deploying the application
# 3. Ensuring the instance is stopped after deployment (success or failure)

- name: Manage EC2 Instance Lifecycle
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - roles/agent_auditor/defaults/main.yml
    - group_vars/all/main.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3
    aws_region: "{{ aws_region }}"
    instance_tag_name: "{{ ec2_instance_tag_name }}"
    wait_for_instance_timeout: "{{ ec2_wait_timeout }}"
    # Define force_update with a static default value
    force_update: "{{ lookup('env', 'FORCE_UPDATE') | default(false) }}"
  
  tasks:
    - name: Skip EC2 instance starting if not explicitly requested
      set_fact:
        skip_ec2_start: "{{ not (caller_id is defined) and not force_update | bool }}"
      tags: [ec2_management]
      
    - name: Debug EC2 start decision
      debug:
        msg: "EC2 start decision: {{ 'SKIPPING EC2 start (regular deployment)' if skip_ec2_start else 'STARTING EC2 (loader or forced)' }}"
      tags: [ec2_management]
      
    - name: Set instance ID from parameter or find by tag
      block:
        - name: Debug EC2 instance ID parameter
          debug:
            msg: "EC2 instance ID parameter: '{{ ec2_instance_id | default('not provided') }}'"
          
        - name: Use provided EC2 instance ID if available
          set_fact:
            instance_id: "{{ ec2_instance_id }}"
          when: ec2_instance_id is defined and ec2_instance_id != ""
          
        - name: Debug instance ID after parameter check
          debug:
            msg: "Instance ID after parameter check: '{{ instance_id | default('not set') }}'"
          
        - name: Find EC2 instance by tag if no instance ID provided
          amazon.aws.ec2_instance_info:
            region: "{{ aws_region }}"
            filters:
              "tag:Name": "{{ instance_tag_name }}"
          register: ec2_info
          when: instance_id is not defined
          
        - name: Debug EC2 info when searching by tag
          debug:
            msg: "EC2 info when searching by tag: {{ ec2_info | default('not searched') }}"
          when: ec2_info is defined
          
        - name: Verify instance was found when searching by tag
          fail:
            msg: "No EC2 instance found with tag Name:{{ instance_tag_name }}"
          when: 
            - instance_id is not defined
            - ec2_info.instances | length == 0
            
        - name: Set instance ID variable from tag search
          set_fact:
            instance_id: "{{ ec2_info.instances[0].instance_id }}"
          when: instance_id is not defined and ec2_info.instances | length > 0
          
        - name: Debug final instance ID
          debug:
            msg: "Final instance ID: '{{ instance_id | default('not set') }}'"
      when: ec2_auto_start | bool or force_update | bool
      tags: [ec2_management]
        
    - name: Start EC2 instance
      amazon.aws.ec2_instance:
        instance_ids: "{{ instance_id }}"
        region: "{{ aws_region }}"
        state: running
        wait: yes
        wait_timeout: "{{ wait_for_instance_timeout }}"
      register: started_instance
      when: (ec2_auto_start | bool or force_update | bool) and instance_id is defined and not skip_ec2_start
      tags: [ec2_management]
      
    - name: Get instance public IP
      amazon.aws.ec2_instance_info:
        region: "{{ aws_region }}"
        instance_ids: "{{ instance_id }}"
      register: running_instance_info
      when: instance_id is defined and ((ec2_auto_start | bool or force_update | bool) or dns_only_update | default(false) | bool)
      tags: [ec2_management, update_dns]
      
    - name: Set instance IP variable
      set_fact:
        instance_ip: "{{ running_instance_info.instances[0].public_ip_address }}"
      when: running_instance_info is defined and running_instance_info.instances | length > 0
      tags: [ec2_management, update_dns]
        
    - name: Wait for SSH to become available
      wait_for:
        host: "{{ instance_ip }}"
        port: 22
        delay: 10
        timeout: 300
      delegate_to: localhost
      when: (ec2_auto_start | bool or force_update | bool) and instance_ip is defined and (caller_id is defined)
      tags: [ec2_management]
      
    - name: Update inventory with dynamic IP
      add_host:
        name: "{{ instance_ip }}"
        groups: aegong_dynamic
        ansible_user: "{{ ec2_ssh_user }}"
        ansible_ssh_private_key_file: "{{ ec2_ssh_key_file }}"
        ansible_ssh_common_args: "-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null"
        ansible_python_interpreter: "auto_silent"
      when: instance_ip is defined
      tags: [ec2_management]
        
    - name: Debug SSH configuration
      debug:
        msg: 
          - "SSH User: {{ ec2_ssh_user }}"
          - "SSH Key File: {{ ec2_ssh_key_file }}"
          - "Target IP: {{ instance_ip }}"
      when: (ec2_auto_start | bool or force_update | bool) and instance_ip is defined and (caller_id is defined)
      tags: [ec2_management]
        
    - name: Display instance information
      debug:
        msg: "EC2 instance {{ instance_id }} is now running at {{ instance_ip }}"
      when: (ec2_auto_start | bool or force_update | bool) and instance_id is defined and instance_ip is defined and (caller_id is defined or dns_only_update | default(false) | bool)
      tags: [ec2_management, update_dns]
        
    - name: Update configuration files with new IP address
      shell: "{{ playbook_dir }}/../scripts/update_ec2_ip.sh {{ instance_ip }}"
      args:
        chdir: "{{ playbook_dir }}/.."
      when: instance_ip is defined
      delegate_to: localhost
      tags: [ec2_management, update_dns]
      
    - name: Update static inventory file with new IP address
      lineinfile:
        path: "{{ playbook_dir }}/inventory/hosts.ini"
        regexp: '^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+ ansible_user=ubuntu'
        line: "{{ instance_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/AEGONG.pem"
      when: instance_ip is defined
      delegate_to: localhost
      tags: [ec2_management, update_dns]
      
    - name: Update ssh_allowed_cidr in group_vars/all/main.yml
      replace:
        path: "{{ playbook_dir }}/group_vars/all/main.yml"
        regexp: 'ssh_allowed_cidr: "[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+/32"'
        replace: 'ssh_allowed_cidr: "{{ instance_ip }}/32"'
      when: instance_ip is defined
      delegate_to: localhost
      tags: [ec2_management, update_dns]

# This play is now replaced by pre_tasks in the deployment play
- name: Ensure Python is installed on remote server
  hosts: aegong_dynamic
  become: true
  gather_facts: false
  vars:
    ansible_python_interpreter: /bin/sh
    deploy_condition: false  # Skip this play as we've moved the functionality to pre_tasks
  tasks:
    - meta: end_play
      
# Deploy to dynamic IP if triggered from loader
- name: Deploy Agent Auditor Application (Dynamic IP)
  hosts: aegong_dynamic
  become: true
  gather_facts: false
  vars:
    ansible_python_interpreter: auto_silent
    # Only run this play for loader-triggered deployments (with caller_id)
    deploy_condition: "{{ hostvars['localhost']['caller_id'] is defined and hostvars['localhost']['instance_ip'] is defined }}"
  pre_tasks:
    - meta: end_play
      when: not deploy_condition
      
    - name: Display deployment information
      debug:
        msg: "Deploying to dynamic IP (loader-triggered deployment)"
      
    - name: Install Python for Ansible
      raw: test -e /usr/bin/python3 || (apt -y update && apt install -y python3-minimal)
      changed_when: false
      
    - name: Gather facts after Python installation
      setup:
  roles:
    - agent_auditor

# Deploy to static inventory for regular deployments
- name: Deploy Agent Auditor Application (Static IP)
  hosts: aegong_servers
  become: true
  gather_facts: true
  vars:
    # Only run this play for regular deployments (no caller_id)
    deploy_condition: "{{ not (hostvars['localhost']['caller_id'] is defined) }}"
  pre_tasks:
    - meta: end_play
      when: not deploy_condition
      
    - name: Display deployment information
      debug:
        msg: "Deploying to static inventory (regular deployment)"
        
    - name: Check if we can connect to the host
      wait_for_connection:
        timeout: 10
      register: connection_result
      ignore_errors: yes
      
    - name: Fail with helpful message if connection fails
      fail:
        msg: |
          Cannot connect to host {{ inventory_hostname }}. This could be because:
          1. The IP address in inventory ({{ inventory_hostname }}) is incorrect
          2. SSH is not running on the target host
          3. Firewall rules are blocking the connection
          4. The EC2 instance is not running
          
          The EC2 instance discovery found IP: {{ hostvars['localhost']['instance_ip'] | default('No IP discovered') }}
          
          Please update your inventory file or ensure the EC2 instance is running.
      when: connection_result is failed
  roles:
    - agent_auditor

- name: Stop EC2 instance after deployment
  hosts: localhost
  connection: local
  gather_facts: false
  vars_files:
    - roles/agent_auditor/defaults/main.yml
    - group_vars/all/main.yml
  vars:
    ansible_python_interpreter: /usr/bin/python3
    aws_region: "{{ aws_region }}"
    instance_id: "{{ hostvars['localhost']['instance_id'] | default(None) }}"
    wait_for_instance_timeout: "{{ ec2_wait_timeout }}"
    # Use the same definition as in the first play
    force_update: "{{ lookup('env', 'FORCE_UPDATE') | default(false) }}"
    # Check if caller_id is defined in extra vars
    has_caller_id: "{{ caller_id is defined }}"
    # Keep instance running if caller_id is defined (triggered from loader)
    keep_running: "{{ has_caller_id }}"
  
  tasks:
    - name: Debug caller information
      debug:
        msg: 
          - "Caller ID defined: {{ has_caller_id }}"
          - "Keep running: {{ keep_running }}"
      tags: [ec2_management]
      
    - name: Skip if auto-stop is disabled, instance_id is not defined, or triggered from loader
      meta: end_play
      when: (not ec2_auto_stop | bool and not force_update | bool) or instance_id is none or keep_running
      tags: [ec2_management]
      
    - name: Skip stopping EC2 if this is a DNS-only update
      meta: end_play
      when: force_update | bool and dns_only_update | default(false) | bool
      tags: [ec2_management]
      
    - name: Stop EC2 instance
      amazon.aws.ec2_instance:
        instance_ids: "{{ instance_id }}"
        region: "{{ aws_region }}"
        state: stopped
        wait: yes
        wait_timeout: "{{ wait_for_instance_timeout }}"
      register: stopped_instance
      when: (ec2_auto_stop | bool or force_update | bool) and instance_id is not none and not keep_running
      tags: [ec2_management]
      
    - name: Confirm instance is stopped
      debug:
        msg: "EC2 instance {{ instance_id }} has been stopped successfully"
      when: (ec2_auto_stop | bool or force_update | bool) and stopped_instance is defined
      tags: [ec2_management]