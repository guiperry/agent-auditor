name: Start EC2 Instance

on:
  workflow_dispatch:
    inputs:
      caller_id:
        description: 'Unique ID of the caller (for tracking)'
        required: false
        type: string

jobs:
  start-ec2:
    name: Start EC2 Instance and Update DNS
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install or update AWS CLI v2
        run: |
          # Check if AWS CLI is already installed
          if command -v aws &> /dev/null && aws --version | grep -q "aws-cli/2"; then
            echo "AWS CLI v2 is already installed. Updating..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install --update
          else
            echo "Installing AWS CLI v2..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
          fi
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Ansible and required dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass python3-boto3 python3-botocore
          
          # Install Python dependencies for all possible Python interpreters
          echo "Installing boto3 and botocore for all Python interpreters"
          sudo pip3 install boto3 botocore
          
          # Install for Python 3.10 if it exists
          if command -v python3.10 &> /dev/null; then
            sudo python3.10 -m pip install boto3 botocore
          fi
          
          # Install for Python 3.11 if it exists
          if command -v python3.11 &> /dev/null; then
            sudo python3.11 -m pip install boto3 botocore
          fi
          
          # Install for Python 3.12 if it exists
          if command -v python3.12 &> /dev/null; then
            sudo python3.12 -m pip install boto3 botocore
          fi
          
          # Install for the default Python
          sudo python3 -m pip install boto3 botocore
          
          # Install for the pipx environment that Ansible might be using
          if [ -d "/opt/pipx/venvs/ansible-core/bin/python" ]; then
            sudo /opt/pipx/venvs/ansible-core/bin/python -m pip install boto3 botocore
          fi

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh
          # Save the SSH key with both names (id_rsa and AEGONG.pem)
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/AEGONG.pem
          chmod 600 ~/.ssh/id_rsa
          chmod 600 ~/.ssh/AEGONG.pem
          
          # Add known hosts
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          # Create SSH config file to use the key for all hosts
          cat > ~/.ssh/config << EOF
          Host *
            IdentityFile ~/.ssh/AEGONG.pem
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF
          chmod 600 ~/.ssh/config
          
          # Debug SSH setup
          ls -la ~/.ssh/

      - name: Create .env file with Cloudflare credentials
        run: |
          cat > .env << EOF
          CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID=${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_RECORD_NAME=${{ secrets.CLOUDFLARE_RECORD_NAME }}
          EOF

      - name: Check if EC2 instance is already running and healthy
        id: check-instance
        env:
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          AWS_REGION: ${{ secrets.AWS_REGION }}
          EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
        run: |
          # Check instance state
          INSTANCE_STATE=$(aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --query 'Reservations[0].Instances[0].State.Name' --output text)
          echo "Instance state: $INSTANCE_STATE"
          
          # If instance is running, get its public IP
          if [ "$INSTANCE_STATE" == "running" ]; then
            PUBLIC_IP=$(aws ec2 describe-instances --instance-ids $EC2_INSTANCE_ID --query 'Reservations[0].Instances[0].PublicIpAddress' --output text)
            echo "Instance is already running with IP: $PUBLIC_IP"
            
            # Check if application is responding
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" http://$PUBLIC_IP:8084/ || echo "failed")
            
            if [ "$HTTP_STATUS" == "200" ]; then
              echo "Application is healthy and responding with HTTP 200"
              echo "instance_running=true" >> $GITHUB_OUTPUT
              echo "instance_ip=$PUBLIC_IP" >> $GITHUB_OUTPUT
            else
              echo "Application is not responding properly (HTTP status: $HTTP_STATUS)"
              echo "instance_running=false" >> $GITHUB_OUTPUT
            fi
          else
            echo "Instance is not running (state: $INSTANCE_STATE)"
            echo "instance_running=false" >> $GITHUB_OUTPUT
          fi

      - name: Run Ansible playbook to start EC2 and update DNS
        if: steps.check-instance.outputs.instance_running != 'true'
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
          EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          echo "Instance needs to be started or is not healthy"
          echo "$ANSIBLE_VAULT_PASSWORD" > .vault_pass
          
          # Create Ansible configuration to disable host key checking
          mkdir -p ~/.ansible
          echo "[defaults]" > ~/.ansible/ansible.cfg
          echo "host_key_checking = False" >> ~/.ansible/ansible.cfg
          echo "timeout = 30" >> ~/.ansible/ansible.cfg
          
          # Check if pipx Python exists and use it
          if [ -f "/opt/pipx/venvs/ansible-core/bin/python" ]; then
            ANSIBLE_PYTHON_PATH="/opt/pipx/venvs/ansible-core/bin/python"
            echo "Using pipx Python interpreter: $ANSIBLE_PYTHON_PATH"
          else
            ANSIBLE_PYTHON_PATH=$(which python3)
            echo "Using system Python interpreter: $ANSIBLE_PYTHON_PATH"
          fi
          
          # Run only the EC2 management and IP update parts of the playbook
          CALLER_ID="${{ github.event.inputs.caller_id }}"
          if [ -n "$CALLER_ID" ]; then
            echo "Running with caller_id: $CALLER_ID"
            PYTHONPATH=/usr/lib/python3/dist-packages ansible-playbook ansible/playbook.yml --vault-password-file .vault_pass --tags "ec2_management,update_dns" -e "force_update=true ec2_instance_id=$EC2_INSTANCE_ID ansible_python_interpreter=$ANSIBLE_PYTHON_PATH caller_id=$CALLER_ID keep_running=true"
          else
            echo "Running without caller_id"
            PYTHONPATH=/usr/lib/python3/dist-packages ansible-playbook ansible/playbook.yml --vault-password-file .vault_pass --tags "ec2_management,update_dns" -e "force_update=true ec2_instance_id=$EC2_INSTANCE_ID ansible_python_interpreter=$ANSIBLE_PYTHON_PATH keep_running=true"
          fi
          
          # Display debug information
          echo "Using EC2 instance ID: $EC2_INSTANCE_ID"
          
          rm .vault_pass
          
      - name: Use existing instance information
        if: steps.check-instance.outputs.instance_running == 'true'
        run: |
          echo "Using already running instance with IP: ${{ steps.check-instance.outputs.instance_ip }}"
          
          # Update inventory file with the existing IP
          mkdir -p ansible/inventory
          cat > ansible/inventory/hosts.ini << EOF
          [aegong_servers]
          ${{ steps.check-instance.outputs.instance_ip }} ansible_user=ubuntu ansible_ssh_private_key_file=~/.ssh/AEGONG.pem
          
          # The group name '[aegong_servers]' is used by convention in this project.
          # If you are using a specific SSH key for AWS, add 'ansible_ssh_private_key_file'
          # and point it to your .pem file as shown above.
          EOF

      - name: Get EC2 instance IP
        id: get-ip
        run: |
          if [ "${{ steps.check-instance.outputs.instance_running }}" == "true" ]; then
            # Use the IP from the check-instance step
            IP_ADDRESS="${{ steps.check-instance.outputs.instance_ip }}"
          else
            # Extract the IP address from the Ansible inventory file
            IP_ADDRESS=$(grep -E "^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" ansible/inventory/hosts.ini | head -1 | awk '{print $1}')
          fi
          echo "ip_address=$IP_ADDRESS" >> $GITHUB_OUTPUT
          echo "Instance IP: $IP_ADDRESS"

      - name: Update Cloudflare DNS record
        env:
          CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_RECORD_NAME: ${{ secrets.CLOUDFLARE_RECORD_NAME }}
          IP_ADDRESS: ${{ steps.get-ip.outputs.ip_address }}
        run: |
          echo "Updating Cloudflare DNS record for $CLOUDFLARE_RECORD_NAME to point to $IP_ADDRESS"
          
          # Get the DNS record ID
          RECORD_ID=$(curl -s -X GET "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records?type=A&name=$CLOUDFLARE_RECORD_NAME" \
              -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
              -H "Content-Type: application/json" | grep -o '"id":"[^"]*' | cut -d'"' -f4)
          
          if [ -n "$RECORD_ID" ]; then
              # Update existing record
              UPDATE_RESPONSE=$(curl -s -X PUT "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records/$RECORD_ID" \
                  -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                  -H "Content-Type: application/json" \
                  --data "{\"type\":\"A\",\"name\":\"$CLOUDFLARE_RECORD_NAME\",\"content\":\"$IP_ADDRESS\",\"ttl\":60,\"proxied\":false}")
              
              if echo "$UPDATE_RESPONSE" | grep -q '"success":true'; then
                  echo "Successfully updated Cloudflare DNS record to point to $IP_ADDRESS"
              else
                  echo "Failed to update Cloudflare DNS record: $UPDATE_RESPONSE"
              fi
          else
              # Create new record
              CREATE_RESPONSE=$(curl -s -X POST "https://api.cloudflare.com/client/v4/zones/$CLOUDFLARE_ZONE_ID/dns_records" \
                  -H "Authorization: Bearer $CLOUDFLARE_API_TOKEN" \
                  -H "Content-Type: application/json" \
                  --data "{\"type\":\"A\",\"name\":\"$CLOUDFLARE_RECORD_NAME\",\"content\":\"$IP_ADDRESS\",\"ttl\":60,\"proxied\":false}")
              
              if echo "$CREATE_RESPONSE" | grep -q '"success":true'; then
                  echo "Successfully created Cloudflare DNS record pointing to $IP_ADDRESS"
              else
                  echo "Failed to create Cloudflare DNS record: $CREATE_RESPONSE"
              fi
          fi

      - name: Create status file with instance information
        run: |
          cat > instance_status.json << EOF
          {
            "status": "running",
            "ip_address": "${{ steps.get-ip.outputs.ip_address }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "caller_id": "${{ github.event.inputs.caller_id }}"
          }
          EOF
          cat instance_status.json

      - name: Clean up
        if: always()
        run: |
          rm -rf ~/.ssh
          rm -f .env
          rm -f .vault_pass