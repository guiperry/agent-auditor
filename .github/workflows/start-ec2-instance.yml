name: Start EC2 Instance

on:
  workflow_dispatch:
    inputs:
      caller_id:
        description: 'Unique ID of the caller (for tracking)'
        required: false
        type: string

jobs:
  start-ec2:
    name: Start EC2 Instance and Update DNS
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install or update AWS CLI v2
        run: |
          # Check if AWS CLI is already installed
          if command -v aws &> /dev/null && aws --version | grep -q "aws-cli/2"; then
            echo "AWS CLI v2 is already installed. Updating..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install --update
          else
            echo "Installing AWS CLI v2..."
            curl "https://awscli.amazonaws.com/awscli-exe-linux-x86_64.zip" -o "awscliv2.zip"
            unzip -q awscliv2.zip
            sudo ./aws/install
          fi
          aws --version

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Install Ansible and required dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y ansible sshpass python3-boto3 python3-botocore
          
          # Install Python dependencies for all possible Python interpreters
          echo "Installing boto3 and botocore for all Python interpreters"
          sudo pip3 install boto3 botocore
          
          # Install for Python 3.10 if it exists
          if command -v python3.10 &> /dev/null; then
            sudo python3.10 -m pip install boto3 botocore
          fi
          
          # Install for Python 3.11 if it exists
          if command -v python3.11 &> /dev/null; then
            sudo python3.11 -m pip install boto3 botocore
          fi
          
          # Install for Python 3.12 if it exists
          if command -v python3.12 &> /dev/null; then
            sudo python3.12 -m pip install boto3 botocore
          fi
          
          # Install for the default Python
          sudo python3 -m pip install boto3 botocore
          
          # Install for the pipx environment that Ansible might be using
          if [ -d "/opt/pipx/venvs/ansible-core/bin/python" ]; then
            sudo /opt/pipx/venvs/ansible-core/bin/python -m pip install boto3 botocore
          fi

      - name: Configure SSH
        env:
          SSH_PRIVATE_KEY: ${{ secrets.SSH_PRIVATE_KEY }}
          SSH_KNOWN_HOSTS: ${{ secrets.SSH_KNOWN_HOSTS }}
        run: |
          mkdir -p ~/.ssh
          # Save the SSH key with both names (id_rsa and AEGONG.pem)
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/id_rsa
          echo "$SSH_PRIVATE_KEY" > ~/.ssh/AEGONG.pem
          chmod 600 ~/.ssh/id_rsa
          chmod 600 ~/.ssh/AEGONG.pem
          
          # Add known hosts
          echo "$SSH_KNOWN_HOSTS" > ~/.ssh/known_hosts
          chmod 644 ~/.ssh/known_hosts
          
          # Create SSH config file to use the key for all hosts
          cat > ~/.ssh/config << EOF
          Host *
            IdentityFile ~/.ssh/AEGONG.pem
            StrictHostKeyChecking no
            UserKnownHostsFile=/dev/null
          EOF
          chmod 600 ~/.ssh/config
          
          # Debug SSH setup
          ls -la ~/.ssh/

      - name: Create .env file with Cloudflare credentials
        run: |
          cat > .env << EOF
          CLOUDFLARE_API_TOKEN=${{ secrets.CLOUDFLARE_API_TOKEN }}
          CLOUDFLARE_ZONE_ID=${{ secrets.CLOUDFLARE_ZONE_ID }}
          CLOUDFLARE_RECORD_NAME=${{ secrets.CLOUDFLARE_RECORD_NAME }}
          EOF

      - name: Run Ansible playbook to start EC2 and update DNS
        env:
          ANSIBLE_VAULT_PASSWORD: ${{ secrets.ANSIBLE_VAULT_PASSWORD }}
          EC2_INSTANCE_ID: ${{ secrets.EC2_INSTANCE_ID }}
          ANSIBLE_HOST_KEY_CHECKING: "False"
        run: |
          echo "$ANSIBLE_VAULT_PASSWORD" > .vault_pass
          
          # Create Ansible configuration to disable host key checking
          mkdir -p ~/.ansible
          echo "[defaults]" > ~/.ansible/ansible.cfg
          echo "host_key_checking = False" >> ~/.ansible/ansible.cfg
          echo "timeout = 30" >> ~/.ansible/ansible.cfg
          
          # Check if pipx Python exists and use it
          if [ -f "/opt/pipx/venvs/ansible-core/bin/python" ]; then
            ANSIBLE_PYTHON_PATH="/opt/pipx/venvs/ansible-core/bin/python"
            echo "Using pipx Python interpreter: $ANSIBLE_PYTHON_PATH"
          else
            ANSIBLE_PYTHON_PATH=$(which python3)
            echo "Using system Python interpreter: $ANSIBLE_PYTHON_PATH"
          fi
          
          # Run only the EC2 management and IP update parts of the playbook
          PYTHONPATH=/usr/lib/python3/dist-packages ansible-playbook ansible/playbook.yml --vault-password-file .vault_pass --tags "ec2_management,update_dns" -e "force_update=true ec2_instance_id=$EC2_INSTANCE_ID ansible_python_interpreter=$ANSIBLE_PYTHON_PATH ansible_ssh_common_args='-o StrictHostKeyChecking=no -o UserKnownHostsFile=/dev/null'"
          
          # Display debug information
          echo "Using EC2 instance ID: $EC2_INSTANCE_ID"
          
          rm .vault_pass

      - name: Get EC2 instance IP
        id: get-ip
        run: |
          # Extract the IP address from the Ansible inventory file
          IP_ADDRESS=$(grep -E "^[0-9]+\.[0-9]+\.[0-9]+\.[0-9]+" ansible/inventory/hosts.ini | head -1 | awk '{print $1}')
          echo "ip_address=$IP_ADDRESS" >> $GITHUB_OUTPUT
          echo "Instance IP: $IP_ADDRESS"

      - name: Create status file with instance information
        run: |
          cat > instance_status.json << EOF
          {
            "status": "running",
            "ip_address": "${{ steps.get-ip.outputs.ip_address }}",
            "timestamp": "$(date -u +"%Y-%m-%dT%H:%M:%SZ")",
            "caller_id": "${{ github.event.inputs.caller_id }}"
          }
          EOF
          cat instance_status.json

      - name: Clean up
        if: always()
        run: |
          rm -rf ~/.ssh
          rm -f .env
          rm -f .vault_pass